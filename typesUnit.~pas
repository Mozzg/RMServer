unit typesUnit;

interface

uses TransferServerTypeUnit;

type
  Byte_arr = array of byte;

  PTQueueElement = ^TQueueElement;
  TQueueElement = record
    SocketID:integer;
    data:Byte_arr;
    ReceiveTime:TDateTime;
    NextElement:PTQueueElement;
  end;

  TRegisterThreadElement = record
    ThreadID:cardinal;
    Operator:boolean;
    SocketID_arr:array of integer;
  end;

  TCorespElement = record
    ThreadID:cardinal;
    SocketID:integer;
    Time:TDateTime;
  end;

  PTTransferElement = ^TTransferElement;
  TTransferElement = record
    id:cardinal;
    TransferServer:TTransferServer;
    NextElement:PTTransferElement;
  end;

  PTThreadSocketElement = ^TThreadSocketElement;
  TThreadSocketElement = record
    SocketID:integer;
    LastTime:TDateTime;
    EchoInterval:integer;
    Registered:boolean;
    imei_reg:int64;
    //FileServer:cardinal;   //ID трансфер сервера для получения к нему доступа
    FileServer:TTransferServer;
    FileServerUpdateTime:TDateTime;
    buffer:byte_arr;
    Next_Element,Prev_Element:PTThreadSocketElement;
  end;

  TAnswerData = record
    Awaiting:boolean;
    SendTime:TDateTime;
    RequestReceiverSocket:integer;  //тот, кто должен послать ответ
    RequestSenderSocket:integer;   //тот, кто послал запрос
    RequestType:word;
  end;


function GetTickCount64:int64; stdcall;

implementation

function GetTickCount64; external 'kernel32.dll' name 'GetTickCount64';

end.
